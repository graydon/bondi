#!/bin/bash
# Program: run-tests-sh 
# Purpose: This program executes bondi against the .bon files in the
#          bondi distribution. Note bondi executable must be located
#          in the bondi directory. 
#    Date: 22/05/2009
#  Author: Arun Kumar (arun@it.uts.edu.au)

# ENVIRONMENT VARIABLE PRIMER FOR REFERENCE
# $0 script invoked
# $1, $2, $3 are the command line arguments
# $# Number of command line arguments 
# $@ all command line arguments - white space is preserved
# $* all command line arguments - white space striped 

processEachDirectory() {
    # process each directory
    for d in $DIRS; 
    do
	echo -n "Entering directory [$d]..."
	if [ -d $d ]
	then
	    echo "[ok]"	
	    cd $d
	    installDependencies $d
	    echo -n "checking automake dependencies in [$d] ..."
	    checkDependency automake 
	    checkDependency autoreconf
	    if [ -f generate-tests-sh ] &&
	       [ -f configure.in ]      &&
	       [ -f run-tests-sh ]
	    then
		echo "[ok]"        
		./generate-tests-sh -v "$verbose" -fp "$filepattern"
		if ./run-tests-sh
                then
                    :
                else
                    # errors found clean up and return error
		    make clean
		    removeFile Makefile
		    removeFile Makefile.am
		    removeFile generate-tests-sh
		    removeFile configure.in
		    removeFile run-tests-sh
		    cd ../
                    exit 1
                fi
		make clean
		removeFile Makefile
		removeFile Makefile.am
		removeFile generate-tests-sh
		removeFile configure.in
		removeFile run-tests-sh
		cd ../
	    else
		echo ""        
		echo "automake dependencies are not installed in [$d]"        
		echo "directory [$d] does not have configure.in installed"        
		echo "directory [$d] does not have generate-tests-sh installed"   
		echo "directory [$d] does not have run-tests-sh installed"        
	    fi 
	else
	    echo ""
	    echo "directory [$d] does not exist"
	fi
	# check if 'missing' symbolic is present in the bondi directory
	removeFile missing 
    done
}

printTestableDirectories() {
    # inform the user that the following directories will be tested
    if [ "$1" == true ]
    then
	echo "-------------------------------------------------"
	echo "   BONDI SOURCES WILL BE NOW BE TESTED           "
	echo "-------------------------------------------------"
	echo "Following directories contain bondi source files:"
	echo ""
	for d in $DIRS;
	do
	    echo "[$(pwd)/$d] "
	done
	echo ""
	echo "Following tests are executed for each test file foo.bon"
	echo "    1. Syntax check & type inference for foo.bon"
        echo "       If there are problems then the test will FAIL "
        echo "       with details given using verbose mode (-v)." 
        echo "    2. If there is a file foo.out"
        echo "       Execute bondi foo.bon > foo.log "
        echo "       then execute diff -I sourcing foo.out foo.log "
        echo "       (the -I ignores differences due to paths for libraries etc) "
	echo ""
	echo "Additional bondi source directories can be added via the -d parameter"
	echo "execute \$ run-tests-sh -h for more details"
    else
	echo "Testing dirs..."
	for d in $DIRS;
	do
	    echo -n "[$d] "
	done
        echo ""
    fi
}

checkBondiBuild() {
    if [ -f bondi ]
    then
        if [ "$1" == true ]
        then
	    echo "-------------------------------------------------"
	    echo "   BONDI BUILD FOUND"
	    echo "-------------------------------------------------"
	    echo "using bondi build from"
	    echo "directory: $(pwd)"
        else
            :
        fi
    else
        if [ "$1" == true ]
        then
	    echo "-------------------------------------------------"
	    echo "   BONDI NOT AVAILABLE"
	    echo "-------------------------------------------------"
	    echo "bondi executable could not be found in"
	    echo "directory: $(pwd)"
	    echo ""
	    echo "You can build bondi by executing the install-sh script:"
	    echo "\$ ./install-sh"
	    echo ""
	    echo "After bondi is built you can validate bondi by running tests"
	    echo "\$ ./run-tests-sh"
	    exit 1
        else
            echo "build bondi first e.g. ./install-sh"
            exit 1
        fi
    fi
}

removeFile() {
    if [ -f $1 ]
    then
	rm -f $1 
    else
	:
    fi
}

notImplemented() {
    echo "option $1 is not implemented"
    exit 1
}

isDiff() {
    if diff -q $1 $2 1> /dev/null  
    then
       echo "diff a"
       return 0
    else
       echo "diff b"
       return 1
    fi
}

checkDependency() {
    if which $1 1> /dev/null 2> /dev/null
    then
        :
    else
        echo "no"
        echo "program $1 is not found on your PATH"
        echo "Please ensure this program is installed"
        echo "and referenced in your PATH"              
        exit 1
    fi
}

installDependencies() {
    if [ -d ../scripts ]
    then
        #isDiff ../scripts/configure.in ../$1/configure.in
        cp ../scripts/configure.in ../$1
	cp ../scripts/generate-tests-sh ../$1
	cp ../scripts/run-tests-sh ../$1
    else
        echo "directory [scripts] does not exist"
        echo "This directory contains automake dependencies"
        exit 1
    fi
}

usage() {
    echo "Usage: run-tests-sh [-v -o -l -g -d dirs -fp filepattern]"
    echo "Executes tests using the latest bondi build"
    echo "options:                               "
    echo "    -v print diff output (disabled by default)"
    echo "    -o test files by oldest modification time"
    echo "    -l test files by latest modification time"
    echo "    -g generate .out for bon files"
    echo "    -d set directories"
    echo "    -fp test one or many files eg. customer.bon or *cust*"
    echo "    -h print usage"
    echo "    --help print usage"
    echo "Examples"
    echo "    $ ./run-tests-sh"
    echo "    $ ./run-tests-sh -fp customer*.bon"
    echo "    $ ./run-tests.sh -d \"tests pc_book lib prelude\""
    exit 0
}


# all the support options
verbose=false
filepattern="*.bon"
older=no          
younger=no        
generate=no     
DIRS="tests pc_book lib"

# process command line arguments
while [ $# -gt 0 ]
do
    case "$1" in
        -v)  verbose=true;;
        -o)  notImplemented "-o";; 
        -l)  notImplemented "-l";;
        -g)  notImplemented "-g";;
	-fp) filepattern="$2"; shift;;
	-d)  DIRS="$2"; shift;;
	--help) usage; exit 0;;	
	-h)     usage; exit 0;;	
	-*)     usage; exit 1;;
	*)  break;;	# terminate while loop
    esac
    shift
done

# set bondi directory to current directory
export BONDI_LIB_DIR=$(pwd)

# ensure a bondi build is available to test
checkBondiBuild $verbose
printTestableDirectories $verbose
processEachDirectory
