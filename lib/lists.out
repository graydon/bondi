(* Begin sourcing "./prelude/standard_prelude.bon"... *)
(* Begin sourcing "./prelude/printing.bon"... *)
^: String -> String -> String
toString: a -> String
print: a -> Unit
println: a -> Unit
(* Finished sourcing "./prelude/printing.bon" *)
(* Begin sourcing "./prelude/imperatives_core.bon"... *)
forall: Int -> Int -> (Int -> a) -> Unit
iter: (all a.a -> Unit) -> b -> Unit
clone: a -> a
(* Finished sourcing "./prelude/imperatives_core.bon" *)
(* Begin sourcing "./prelude/structure_poly.bon"... *)
Pair: a -> b -> a * b
fromTuple: a -> String
it: Unit
fst: a * b -> a
snd: a * b -> b
Inl: a -> a + b
Inr: b -> a + b
Evr: a -> Konstant a b
Ths: a -> Identity a
ParamPair: a b -> c b -> ParamProduct a c b
Ok: a b -> Okay a b
Nest: a (b c) -> Nested a b c
Tag: (a -> b) -> a c -> Represent a b c
deconstruct: a b -> (all c.Represent c a b -> d) -> d
reconstruct: Represent a b c -> b c
map: (a -> b) -> c a -> c b
Nil: List a
Cons: a -> List a -> List a
toString: b -> String
toString: c -> String
Some: a -> Maybe a
None: Maybe a
foldleft: (a -> b -> a) -> a -> c b -> a
foldright: (a -> b -> b) -> c a -> b -> b
zipwith: (a * b -> c) -> d a * e b -> d c
(* Finished sourcing "./prelude/structure_poly.bon" *)
(* Begin sourcing "./prelude/datum2generic.bon"... *)
&&: Bool -> Bool -> Bool
not: Bool -> Bool
||: Bool -> Bool -> Bool
equal: a * b -> Bool
==: a -> a -> Bool
!=: a -> a -> Bool
plus: a * b -> a
+: a -> a -> a
shortplus: a * b -> a
minus: a * b -> a
-: a -> a -> a
times: a * b -> a
*: a -> a -> a
divide: a * b -> a
/: a -> a -> a
negate: a -> a
lessthan: a * b -> Bool
<: a -> a -> Bool
lessthanorequal: a * b -> Bool
<=: a -> a -> Bool
greaterthan: a * b -> Bool
>: a -> a -> Bool
greaterthanorequal: a * b -> Bool
>=: a -> a -> Bool
(* Finished sourcing "./prelude/datum2generic.bon" *)
(* Begin sourcing "./prelude/dynamic2static.bon"... *)
dynamic_case_for_internal_use_only = ...
(* Finished sourcing "./prelude/dynamic2static.bon" *)
(* Begin sourcing "./prelude/queries.bon"... *)
apply2all: (all a.a -> a) -> b -> b
append: List a -> List a -> List a
some_append: Maybe a -> List a -> List a
select: (all a.a -> Maybe b) -> c -> List b
is: lin a -> b -> Maybe a
(* Finished sourcing "./prelude/queries.bon" *)
(* Finished sourcing "./prelude/standard_prelude.bon" *)
(* Begin sourcing "./lib/lists.bon"... *)
listHead: List a -> a
listTail: List a -> List a
listLast: List a -> a
listInit: List a -> List a
listNull: List a -> Bool
listAny: (a -> Bool) -> List a -> Bool
listAll: (a -> Bool) -> List a -> Bool
listLength: List a -> Int
listReverse: List a -> List a
listIntersperse: a -> List a -> List a
listIntercalate: List a -> List (List a) -> List a
listFlatten: List (List a) -> List a
listTake: Int -> List a -> List a
listDrop: Int -> List a -> List a
listSplitAt: Int -> List a -> List a * List a
listSubList: Int -> Int -> List a -> List a
listTakeWhile: (a -> Bool) -> List a -> List a
listDropWhile: (a -> Bool) -> List a -> List a
listSpan: (a -> Bool) -> List a -> List a * List a
listBreak: (a -> Bool) -> List a -> List a * List a
listElem: a -> List b -> Bool
listNotElem: a -> List b -> Bool
listFilter: (a -> Bool) -> List a -> List a
listPartition: (a -> Bool) -> List a -> List a * List a
listElemAt: Int -> List a -> a
listElemIndex: a -> List b -> Maybe Int
listElemIndices: a -> List b -> List Int
listFindIndex: (a -> Bool) -> List a -> Maybe Int
listFindIndices: (a -> Bool) -> List a -> List Int
listInsertAt: Int -> a -> List a -> List a
listDelete: a -> List b -> List b
listDeleteAll: a -> List b -> List b
listDeleteAt: Int -> List a -> List a
listUnique: List a -> List a
listUnion: List a -> List a -> List a
listIntersect: List a -> List b -> List a
listInsertAsc: a -> List a -> List a
listInsertDesc: a -> List a -> List a
listMergeBy: (a -> a -> Bool) -> List a * List a -> List a
listSort: (a -> a -> Bool) -> List a -> List a
listSortAsc: List a -> List a
listSortDesc: List a -> List a
listFittest: (a -> a -> a) -> List a -> a
listMaximum: List a -> a
listMinimum: List a -> a
listReplicate: a -> Int -> List a
(* Finished sourcing "./lib/lists.bon" *)