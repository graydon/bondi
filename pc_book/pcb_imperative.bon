(*
%open "pc_book/pcb_imperative.bon";;
*)

(*** Imperative style *) 

let x = Ref 3 in 
x = !x + 1;
!x;;

Ref;;

(*
let x = Ref Nil in 
  x = Cons 1 !x;
  x = Cons True !x;       (* ill-typed! *) 
  !x;;    
*)


printstring "abc";;


let print x = printstring (toString x);;

let factorial n = 
let x = Ref n in
let res = Ref 1 in 
while (!x > 0) do 
  (res = !res * !x; x = !x - 1);
!res
;; 
factorial 5;;

let factorial2 n = 
let res = Ref 1 in 
(for i = 1 to n do res = !res * i);
!res;;
factorial2 5;;
factorial2 (-7);;




datatype LinkedList a = LLnode of ref a and ref (LinkedList a)
with 
toString += | LLnode v n as z -> 
 let rec (aux: a -> String) = 
 | LLnode v1 (Ref (Exception "nil")) -> toString !v1  
 | LLnode v1 n1 -> (toString !v1) ^ "," ^ (aux !n1) 
 | _ -> ""
 in 
 "[" ^ (aux z) ^ "]" 
;;


let llnil  = | Un -> Ref (Exception "nil");;

let n0 = LLnode (Ref 0) (llnil()) ;;
let n1 = LLnode (Ref 1) (Ref n0);;
let n2 = LLnode (Ref 2) (llnil()) ;;
let n3 = LLnode (Ref 3) (Ref n1);;



let (l_insert : LinkedList a -> LinkedList a -> Unit) = 
| LLnode v1 n1 -> | LLnode v2 n2 -> 
	n1 = !n2;
	n2 = LLnode v1 n1
;;
l_insert n2 n3;;
n3;;


let rec (iter0: (all a. (a->Unit)) -> b -> Unit)  f z = 
f z; 
(	
 | z y -> (iter0 f z); (iter0 f y)
 | y -> ()
) z
;;

let anyIncr = 
| (Ref (x:Int)) as z -> z = !z + 1
| _ -> ()
;;



iter anyIncr n3; n3;;



datatype DLinkedList a = DLnode of ref a and ref (DLinkedList a) and ref (ref (DLinkedList a))
with 
toString += | (DLnode v n p) as z ->  
 let rec (aux: a -> String) = 
 | DLnode v1 (Ref (Exception "nil")) _ -> toString !v1  
 | DLnode v1 n1 _ -> (toString !v1) ^ "," ^ (aux !n1) 
 | _ -> ""
 in 
 "[" ^ (aux z) ^"]"
;;
let makeDLnode x = DLnode x (Ref (Exception "nil"))  (Ref (Ref (Exception "nil")));;


let n0 = makeDLnode (Ref 0);;
let n1 = makeDLnode (Ref 1);;
let n2 = makeDLnode (Ref 2);;
let n3 = makeDLnode (Ref 3);;

let (d_insert : DLinkedList a -> DLinkedList a -> Unit) = 
| DLnode v1 n1 p1-> | DLnode v2 n2 p2 -> 
	n1 = !n2;
	p1 = Ref (DLnode v2 n2 p2);
	n2 = DLnode v1 n1 p1
;;
d_insert n1 n0 ;;
d_insert n2 n1 ;;
d_insert n3 n2 ;;
n0;;

(* 
iter anyIncr n0 ;; 
			won't terminate 

*)

let ext (iter: (all a. a->Unit) -> b -> Unit) f z = 
f z; 
(	| Ref (Ref z) -> () 
        | Ref x -> iter f x
	| x y -> (iter f x); (iter f y)
	| y as _array -> forall 0 ((lengthv y) minusint 1) (fun i -> iter f (entry(y,i)))
	| y -> ()) z
;;


iter anyIncr n0 ;; 
n0;;
