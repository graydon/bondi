


class Node <a>   {
value : a ;
next : Node <a>;
getValue  = { |() -> !this.value }
setValue = { fun v -> this.value = v }
getNext = { |() -> !this.next }
setNext = { fun (n: Node <a>) -> this.next = n }
insert = { fun (n: Node<a>) -> n.setNext (this.getNext()); this.setNext n }
with 
toString += | (x: Node<a>) ->
 let rec (aux: c -> String) = 
 | Node _ (v,Ref (Exception _)) -> toString !v  
 | Node _ (v,n) -> (toString !v) ^ "," ^ (aux !n) 
 | _ -> ""
 in 
 "[" ^ (aux x) ^"]" 
}



let x0 = new Node <Int>  ;;
let x1 = new Node<Int>  ;;
let x2 = new Node<Int>  ;;
x0.setValue 0;
x1.setValue 1;
x2.setValue 2;
x0.setNext x2;
x0;;
x0.insert x1;
x0;;
let r4 = new Node <Float>;; 
r4.setValue 4.4;
r4;;


let anyNode = 
| (x:Node) -> print (x.getValue())
| _ -> ()
;;

iter anyNode x0;;
iter anyNode r4;;


class DNode <a> extends Node {
previous : ref (DNode <a>); 
getPrev = { |()-> ! !this.previous }
setPrev  = { fun (p: DNode <a>) -> this.previous = Ref p }
setNext = { 
let (aux: Node<a>[b] -> Unit) = 
 | (n:DNode<a>[c]) ->
                super.setNext n;
		n.setPrev this
 | n -> super.setNext n
 in fun (x: Node<a>) -> aux x
}        
}


let d0 = new DNode<Int>   ;;
let d1 = new DNode<Int>  ;;
let d2 = new DNode<Int>  ;;
d0.setValue 0;;
d1.setValue 1;;
d2.setValue 2;;
d0.setNext d2;
d0;;
d2.getPrev();;
d0.insert d1;
d2.getPrev();;
d1.getPrev();;

